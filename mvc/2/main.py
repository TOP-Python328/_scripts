"""
–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –°–∞–ø—ë—Ä ‚Äî —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MVC.
"""

from dataclasses import dataclass
from enum import Enum
from random import randrange as rr
from typing import Optional, Self

from tkinter import Button, Frame, Label, Tk, Spinbox, StringVar
from tkinter.messagebox import showinfo
from tkinter.constants import BOTTOM, LEFT, RIGHT, SUNKEN, X


# –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
CellsMatrix = list[list['Cell']]
ButtonsBoard = list[list[Button]]


class States(Enum):
    OPENED = 'o'
    CLOSED = ''
    FLAGGED = 'üö©'
    QUESTIONED = '?'
    
    @classmethod
    def cycling(cls) -> list[Self]:
        tmp = list(cls)
        tmp.remove(cls.OPENED)
        return tmp


@dataclass
class Cell:
    """
    –û–ø–∏—Å—ã–≤–∞–µ—Ç —Å—É—â–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è.
    """
    row: int
    column: int
    state: States = States.CLOSED
    mined: bool = False
    counter: int = 0
    
    __cycling_states = States.cycling()
    def next_state(self):
        """–¶–∏–∫–ª–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–µ—Ç–∫–∏."""
        if self.state is not States.OPENED:
            i = self.__cycling_states.index(self.state)
            self.state = self.__cycling_states[(i+1) % 3]
    
    def open(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∫–ª–µ—Ç–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ '–æ—Ç–∫—Ä—ã—Ç–æ'."""
        if self.state is not States.OPENED:
            self.state = States.OPENED


MIN_ROWS = 5
MAX_ROWS = 30

MIN_COLUMNS = 5
MAX_COLUMNS = 30

MIN_MINES = 10
MAX_MINES = 800


class Matrix:
    def __init__(self):
        self.create_matrix()
    
    def create_matrix(
            self,
            rows: int = 10,
            columns: int = 10,
            mines: int = 20
    ) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–µ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è.
        
        :param rows: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
        :param columns: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
        :param mines: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ
        """
        if MIN_ROWS <= rows <= MAX_ROWS:
            self.rows = rows
        if MIN_COLUMNS <= columns <= MAX_COLUMNS:
            self.columns = columns
        if MIN_MINES <= mines <= MAX_MINES and mines < self.rows*self.columns:
            self.mines = mines
        
        self.matrix: CellsMatrix = [
            [Cell(i, j) for j in range(self.columns)]
            for i in range(self.rows)
        ]
        self.game_over: bool = False
        self.first_step: bool = True
    
    def _generate_mines(self) -> None:
        """–†–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–ª–µ—Ç–∫–∞—Ö –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è."""
        for _ in range(self.mines):
            while True:
                i = rr(self.rows)
                j = rr(self.columns)
                cell = self.matrix[i][j]
                if not cell.mined and cell.state is not States.OPENED:
                    cell.mined = True
                    break
    
    def is_win(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –≤—ã–∏–≥—Ä—ã—à."""
        for row in self.matrix:
            for cell in row:
                opened_or_flagged = cell.state is States.OPENED or cell.state is States.FLAGGED
                if not cell.mined and not opened_or_flagged:
                    return False
        return True
    
    def is_game_over(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–ª—É—á–∏–ª—Å—è –ª–∏ –ø—Ä–æ–∏–≥—Ä—ã—à."""
        return self.game_over
    
    def cell_cycle_state(self, row: int, column: int) -> None:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –æ—Ç–º–µ—Ç–∫—É –Ω–∞ –∫–ª–µ—Ç–∫–µ."""
        self.matrix[row][column].next_state()
    
    def get_cell(self, row: int, column: int) -> Optional[Cell]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–µ—Ç–∫—É –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω–¥–µ–∫—Å–∞–º, –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ, –∏–Ω–∞—á–µ None."""
        if 0 <= row < self.rows and 0 <= column < self.columns:
            return self.matrix[row][column]
        return None
    
    def _get_cell_neighbours(self, row: int, column: int) -> list[Cell]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª–µ—Ç–æ–∫, —Å–æ—Å–µ–¥–Ω–∏—Ö —Å –∫–ª–µ—Ç–∫–æ–π, –∑–∞–¥–∞–Ω–Ω–æ–π –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏."""
        neighbours = []
        for i in range(row-1, row+2):
            neighbours.append(self.get_cell(i, column-1))
            if i != row:
                neighbours += [self.get_cell(i, column)]
            neighbours += [self.get_cell(i, column+1)]
        return [cell for cell in neighbours if cell is not None]
    
    def _get_mines_around_cell(self, row: int, column: int) -> int:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫ —Ä—è–¥–æ–º —Å –∫–ª–µ—Ç–∫–æ–π, –∑–∞–¥–∞–Ω–Ω–æ–π –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏."""
        neighbours = self._get_cell_neighbours(row, column)
        return sum(cell.mined for cell in neighbours)
    
    def open_cell(self, row: int, column: int) -> None:
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–µ—Ç–∫—É, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∏–Ω—É, –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω —Ä—è–¥–æ–º —Å –æ—Ç–∫—Ä—ã—Ç–æ–π, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–æ—Å–µ–¥–Ω–∏–µ –ø—É—Å—Ç—ã–µ –∫–ª–µ—Ç–∫–∏."""
        cell = self.get_cell(row, column)
        if cell is None:
            return
        
        cell.open()
        
        if cell.mined:
            self.game_over = True
            return
        
        if self.first_step:
            self.first_step = False
            self._generate_mines()
        
        cell.counter = self._get_mines_around_cell(row, column)
        
        if cell.counter == 0:
            neighbours = self._get_cell_neighbours(row, column)
            for n_cell in neighbours:
                if n_cell.state is States.CLOSED:
                    self.open_cell(n_cell.row, n_cell.column)


class GUI(Frame):
    def __init__(
            self,
            model_obj: 'Matrix',
            controller_obj: 'Game',
            parent=None
    ):
        super().__init__(parent)
        
        self.model = model_obj
        self.controller = controller_obj
        self.controller.set_view(self)
        
        self.rows = StringVar(value=str(self.model.rows))
        self.columns = StringVar(value=str(self.model.columns))
        self.mines = StringVar(value=str(self.model.mines))
        
        self.create_board()
        self.create_panel()
    
    def create_board(self) -> None:
        try:
            self.board.pack_forget()
            self.board.destroy()
        except AttributeError:
            pass
        else:
            self.rows.set(str(self.model.rows))
            self.columns.set(str(self.model.columns))
            self.mines.set(str(self.model.mines))
        
        self.board = Frame(self)
        self.board.pack()
        
        self.buttons: ButtonsBoard = []
        for i in range(self.model.rows):
            row = Frame(self.board)
            row.pack()
            self.buttons.append([])
            for j in range(self.model.columns):
                btn = Button(
                    row,
                    width=4, height=1,
                    font=('Corbel', 20),
                    command=lambda r=i, c=j: self.controller.on_left_click(r, c)
                )
                btn.bind(
                    '<Button-3>',
                    lambda event, r=i, c=j: self.controller.on_right_click(r, c)
                )
                btn.pack(side=LEFT)
                self.buttons[i].append(btn)
    
    def create_panel(self) -> None:
        panel = Frame(self)
        panel.pack(side=BOTTOM, fill=X)
        
        Button(
            panel,
            text='–ù–æ–≤–∞—è –∏–≥—Ä–∞',
            font=('Corbel', 16),
            command=self.controller.restart_game
        ).pack(side=RIGHT)
        
        Spinbox(
            panel,
            from_=MIN_MINES,
            to=MAX_MINES,
            textvariable=self.mines,
            width=4,
            font=('Corbel', 16),
        ).pack(side=RIGHT)
        Label(
            panel,
            text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω: ',
            font=('Corbel', 16)
        ).pack(side=RIGHT)
        
        Spinbox(
            panel,
            from_=MIN_COLUMNS,
            to=MAX_COLUMNS,
            textvariable=self.columns,
            width=3,
            font=('Corbel', 16)
        ).pack(side=RIGHT)
        Label(
            panel,
            text=' x ',
            font=('Corbel', 16)
        ).pack(side=RIGHT)
        
        Spinbox(
            panel,
            from_=MIN_ROWS,
            to=MAX_ROWS,
            textvariable=self.rows,
            width=3,
            font=('Corbel', 16)
        ).pack(side=RIGHT)
        Label(
            panel,
            text='–†–∞–∑–º–µ—Ä –ø–æ–ª—è: ',
            font=('Corbel', 16)
        ).pack(side=RIGHT)
    
    @property
    def game_settings(self) -> tuple[int, int, int]:
        return int(self.rows.get()), int(self.columns.get()), int(self.mines.get())
    
    @staticmethod
    def show_win_message() -> None:
        showinfo('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!', '–í—ã –ø–æ–±–µ–¥–∏–ª–∏!')
    
    @staticmethod
    def show_game_over_message() -> None:
        showinfo('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞', '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏')
    
    def sync_model(self) -> None:
        for i in range(self.model.rows):
            for j in range(self.model.columns):
                cell = self.model.get_cell(i, j)
                if cell is None:
                    return
                
                btn = self.buttons[i][j]
                
                if self.model.is_game_over() and cell.mined:
                    btn.config(bg='black', text='')
                
                if cell.state is States.CLOSED:
                    btn.config(text=States.CLOSED.value)
                elif cell.state is States.FLAGGED:
                    btn.config(text=States.FLAGGED.value)
                elif cell.state is States.QUESTIONED:
                    btn.config(text=States.QUESTIONED.value)
                elif cell.state is States.OPENED:
                    btn.config(relief=SUNKEN, text='')
                    if cell.counter > 0:
                        btn.config(text=cell.counter)
                    elif cell.mined:
                        btn.config(bg='red')
    
    def block_button(self, row: int, column: int, block: bool = True):
        btn = self.buttons[row][column]
        if not btn:
            return
        
        if block:
            btn.bind('<Button-1>', 'break')
        else:
            btn.unbind('<Button-1>')


class Game:
    def __init__(self, model_obj: Matrix):
        self.model = model_obj
        self.view: GUI = None
    
    def set_view(self, view_obj: GUI) -> None:
        self.view = view_obj
    
    def restart_game(self) -> None:
        self.model.create_matrix(*self.view.game_settings)
        self.view.create_board()
    
    def on_left_click(self, row: int, column: int) -> None:
        self.model.open_cell(row, column)
        self.view.sync_model()
        if self.model.is_win():
            self.view.show_win_message()
            self.restart_game()
        elif self.model.is_game_over():
            self.view.show_game_over_message()
            self.restart_game()
    
    def on_right_click(self, row: int, column: int) -> None:
        self.model.cell_cycle_state(row, column)
        self.view.sync_model()
        cell = self.model.matrix[row][column]
        self.view.block_button(
            row, column,
            cell.state is States.FLAGGED
        )


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞."""
    m = Matrix()
    c = Game(m)
    
    root = Tk()
    root.title('–°–∞–ø—ë—Ä')
    v = GUI(m, c, root)
    
    v.pack()
    v.mainloop()


if __name__ == '__main__':
    main()
