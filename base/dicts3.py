numbers = {
      1: ('один', 'одна', 'одно'),
    1.0: ['один', 'одна', 'одно'],
    '1': {'один', 'одна', 'одно'},
}

# >>> numbers
# {1: ['один', 'одна', 'одно'], '1': {'одно', 'одна', 'один'}}

# равные числа хэшируются одинаково, даже если являются объектами разных типов (например, int и float)

# изменение значений по существующему ключу
numbers[1] = ('один', 'одна', 'одно')
numbers['1'] = ('один', 'одна', 'одно')
# добавление значений по ещё не существующему ключу
numbers[2] = ('два', 'две', 'два')
numbers['2'] = ('два', 'две', 'два')

print(*numbers.items(), sep='\n', end='\n\n')

# удаление и возврат значения по ключу
val = numbers.pop('1')
print(*numbers.items(), sep='\n', end='\n\n')

# обновление словаря numbers другим словарём
numbers |= {'1': val}
print(*numbers.items(), sep='\n', end='\n\n')


# >>> d1 = {'a': 1}
# >>> d2 = {'b': 2}
# >>> d3 = {'a': 500}

# оператор слияния (Python 3.9+)
# >>> d1 | d2
# {'a': 1, 'b': 2}
# >>>
# >>> d1 | d3
# {'a': 500}
# >>>
# >>> d3 | d1
# {'a': 1}
# >>>
# >>> d1
# {'a': 1}
# >>> d2
# {'b': 2}
# >>> d3
# {'a': 500}

# оператор обновления (Python 3.9+)
# >>> d2 |= d3
# >>> d2
# {'b': 2, 'a': 500}
# >>>
# >>> d1 |= d2
# >>> d1
# {'a': 500, 'b': 2}

# метод обновления
# >>> d1.update({'b': 200, 'c': 300})
# >>> d1
# {'a': 500, 'b': 200, 'c': 300}
